{"version":3,"file":"index.mjs","sources":["../../../src/dom/meta-node.mjs","../src/app/prerender.mjs","../src/app/hydrate.mjs"],"sourcesContent":["import { pipe } from \"../util/index.mjs\"\nimport { run, zipWith } from \"../util/iterable/sync.mjs\"\n\n// https://html.spec.whatwg.org/multipage/syntax.html#void-elements\nconst isVoidElement = element =>\n  [\n    \"base\",\n    \"link\",\n    \"meta\",\n\n    \"hr\",\n    \"br\",\n    \"wbr\",\n\n    \"area\",\n    \"img\",\n    \"track\",\n\n    \"embed\",\n    \"param\",\n    \"source\",\n    \n    \"col\",\n    \n    \"input\"\n  ].includes(element)\n\n// https://html.spec.whatwg.org/multipage/syntax.html#elements-2\n// https://html.spec.whatwg.org/multipage/syntax.html#cdata-rcdata-restrictions\nconst escapeForElement = string =>\n  string\n    .replace(/&/g, \"&amp;\")\n    .replace(/<\\//g, \"&lt;/\")\n\n// https://html.spec.whatwg.org/multipage/syntax.html#syntax-attribute-value\nconst escapeForDoubleQuotedAttribute = string =>\n  string\n    .replace(/&/g, \"&amp;\")\n    .replace(/\"/g, \"&quot;\")\n\nconst isAttributes = x =>\n  !(x instanceof MetaNode) &&\n  typeof x == \"object\"\n\n\n// Meta Nodes\n\nexport class MetaNode {\n  constructor() {\n    this.properties = {}\n    this.onHydrate = () => {}\n    this.hydrateTag = undefined\n  }\n\n  toString() {}\n\n  toNode() {}\n\n  addProperties(properties = {}) {\n    Object.assign(this.properties, properties)\n\n    return this\n  }\n\n  setOnHydrate(f = () => {}) {\n    this.onHydrate = f\n\n    return this\n  }\n\n  hydrate() {}\n\n  setHydrateTag(tag = \"\") {\n    this.hydrateTag = tag\n\n    return this\n  }\n}\n\nexport class MetaTextNode extends MetaNode {\n  constructor(textContent) {\n    super()\n    this.textContent = textContent\n  }\n\n  toString() {\n    return `<bruh-textnode style=\"all:unset;display:inline\" ${\n      this.hydrateTag\n        ? `data-bruh-hydrate=\"${escapeForDoubleQuotedAttribute(this.hydrateTag)}\"`\n        : \"\"\n    }>${\n      escapeForElement(this.textContent.toString())\n    }</bruh-textnode>`\n  }\n\n  toNode() {\n    const node = document.createTextNode(this.textContent)\n\n    Object.assign(node, this.properties)\n    this.onHydrate(node)\n\n    return node\n  }\n\n  hydrate(node) {\n    const replacement = this.toNode()\n    node.replaceWith(replacement)\n    return replacement\n  }\n}\n\nexport class MetaElement extends MetaNode {\n  constructor(name, namespace) {\n    super()\n    this.name = name\n    this.namespace = namespace\n    this.children = []\n\n    this.attributes = {}\n    this.dataset = {}\n  }\n\n  toString() {\n    const datasetWithHydrateTag =\n      this.hydrateTag\n        ? Object.assign({}, this.dataset, { bruhHydrate: this.hydrateTag })\n        : this.dataset\n    // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n    const attributes =\n      [\n        ...Object.entries(this.attributes),\n        ...Object.entries(datasetWithHydrateTag)\n          .map(([name, value]) => {\n            // https://html.spec.whatwg.org/multipage/dom.html#dom-domstringmap-setitem\n            const skewered = name.replace(/[A-Z]/g, letter => `-${letter.toLowerCase()}`)\n            return [`data-${skewered}`, value]\n          })\n      ]\n        .map(([name, value]) =>\n          value == \"\"\n            ? ` ${name}`\n            : ` ${name}=\"${escapeForDoubleQuotedAttribute(value.toString())}\"`\n        ).join(\"\")\n    // https://html.spec.whatwg.org/multipage/syntax.html#syntax-start-tag\n    const startTag = `<${this.name}${attributes}>`\n\n    if (isVoidElement(this.name))\n      return startTag\n    else {\n      const contents =\n        this.children\n          .map(child =>\n            typeof child == \"string\"\n              ? escapeForElement(child)\n              : child.toString()\n          ).join(\"\")\n      // https://html.spec.whatwg.org/multipage/syntax.html#end-tags\n      const endTag = `</${this.name}>`\n      return startTag + contents + endTag\n    }\n  }\n\n  toNode() {\n    const node =\n      this.namespace\n        ? document.createElementNS(this.namespace, this.name)\n        : document.createElement  (                this.name)\n\n    // Add children\n    node.append(...this.children\n      .map(child =>\n        child instanceof MetaNode\n          ? child.toNode()\n          : child // Allow strings to become bare text nodes\n      )\n    )\n    // Assign properties, attributes, dataset, and run onHydrate\n    Object.assign(node, this.properties)\n    Object.entries(this.attributes)\n      .forEach(([name, value]) => node.setAttribute(name, value))\n    Object.assign(node.dataset, this.dataset)\n\n    this.onHydrate(node)\n\n    return node\n  }\n\n  addAttributes(attributes = {}) {\n    Object.assign(this.attributes, attributes)\n\n    return this\n  }\n\n  addDataAttributes(dataAttributes = {}) {\n    Object.assign(this.dataset, dataAttributes)\n\n    return this\n  }\n\n  prepend(...xs) {\n    this.children.unshift(...xs)\n\n    return this\n  }\n\n  append(...xs) {\n    this.children.push(...xs)\n\n    return this\n  }\n\n  hydrate(node) {\n    // TODO: make this element replacement check have solid requirements\n    const shouldReplace = node.localName != this.name\n  \n    if (shouldReplace) {\n      const replacement = this.toNode()\n      node.replaceWith(replacement)\n      node = replacement\n    }\n    else {\n      Object.assign(node, this.properties)\n  \n      // Zip meta children and DOM children with .hydrate()\n      pipe(\n        [\n          this.children\n            .filter(child => child instanceof MetaNode), // Ignore bare text nodes\n          node.children\n        ],\n        zipWith((childMetaNode, childNode) => childMetaNode.hydrate(childNode)),\n        run\n      )\n  \n      metaNode.onHydrate(node)\n    }\n\n    return node\n  }\n}\n\n// Convenience functions\n\nexport const t = textContent =>\n  new MetaTextNode(textContent)\n\nexport const e = (name, namespace) => (...variadic) => {\n  const meta = new MetaElement(name, namespace)\n\n  // Implement optional attributes as first argument\n  if (variadic[0] && isAttributes(variadic[0]))\n    [meta.attributes, ...meta.children] = variadic\n  else {\n    meta.attributes = {}\n    meta.children = variadic\n  }\n\n  return meta\n}\n","import { t } from \"bruh/dom/meta-node\"\nimport { section, h1, hr } from \"bruh/dom/html\"\nimport { svg, circle } from \"bruh/dom/svg\"\n\nexport const seconds = t(0)\n  .setOnHydrate(node => {\n    let seconds = 0\n    node.bruh = {\n      // This text node's state\n      get seconds() {\n        return seconds\n      },\n      set seconds(n) {\n        node.textContent = seconds = n\n        return seconds\n      },\n\n      interval: null,\n\n      // State transition functions\n      increment: () => ++node.bruh.seconds,\n      decrement: () => --node.bruh.seconds,\n\n      startClock() {\n        node.bruh.interval = setInterval(node.bruh.increment, 1000)\n      },\n      stopClock() {\n        clearInterval(node.bruh.interval)\n      }\n    }\n  })\n  .setHydrateTag(\"seconds\")\n\n\nexport default () =>\n  section({ class: \"bruh moment\" },\n    h1(seconds, \" seconds so far...\")\n      .addDataAttributes({ awesome: true }),\n    \"other text\",\n    hr(),\n    svg({ viewBox: \"0 0 10 10\" },\n      circle({ cx: 5, cy: 5, r: 2 })\n    )\n  )\n","import { seconds } from \"./prerender.mjs\"\n\nconst secondsTextNode = seconds.hydrate(document.querySelector(`[data-bruh-hydrate=\"seconds\"]`))\n\nsecondsTextNode.bruh.startClock()\n"],"names":["MetaTextNode","[object Object]","this","properties","onHydrate","hydrateTag","undefined","Object","assign","f","tag","textContent","super","string","replace","escapeForElement","toString","node","document","createTextNode","replacement","toNode","replaceWith","setOnHydrate","seconds","bruh","n","interval","increment","decrement","setInterval","clearInterval","setHydrateTag","hydrate","querySelector","startClock"],"mappings":"AA+EO,MAAMA,UAhCN,MACLC,cACEC,KAAKC,WAAa,GAClBD,KAAKE,UAAY,OACjBF,KAAKG,gBAAaC,EAGpBL,YAEAA,UAEAA,cAAcE,EAAa,IAGzB,OAFAI,OAAOC,OAAON,KAAKC,WAAYA,GAExBD,KAGTD,aAAaQ,EAAI,UAGf,OAFAP,KAAKE,UAAYK,EAEVP,KAGTD,WAEAA,cAAcS,EAAM,IAGlB,OAFAR,KAAKG,WAAaK,EAEXR,OAKTD,YAAYU,GACVC,QACAV,KAAKS,YAAcA,EAGrBV,WACE,MAAO,mDACLC,KAAKG,WACD,sBArD6BQ,EAqDwBX,KAAKG,WApDlEQ,EACGC,QAAQ,KAAM,SACdA,QAAQ,KAAM,aAmDT,MA5DeD,CAAAA,GACvBA,EACGC,QAAQ,KAAM,SACdA,QAAQ,OAAQ,SA2DfC,CAAiBb,KAAKS,YAAYK,8BAxDDH,IAAAA,EA4DrCZ,SACE,MAAMgB,EAAOC,SAASC,eAAejB,KAAKS,aAK1C,OAHAJ,OAAOC,OAAOS,EAAMf,KAAKC,YACzBD,KAAKE,UAAUa,GAERA,EAGThB,QAAQgB,GACN,MAAMG,EAAclB,KAAKmB,SAEzB,OADAJ,EAAKK,YAAYF,GACVA,GAwIMT,IAAAA,GAAAA,EC/OQ,EDgPvB,IAAIX,EAAaW,IC/OhBY,cAAaN,IACZ,IAAIO,EAAU,EACdP,EAAKQ,KAAO,CAEVD,cACE,OAAOA,GAETA,YAAYE,GAEV,OADAT,EAAKN,YAAca,EAAUE,EACtBF,GAGTG,SAAU,KAGVC,UAAW,MAAQX,EAAKQ,KAAKD,QAC7BK,UAAW,MAAQZ,EAAKQ,KAAKD,QAE7BvB,aACEgB,EAAKQ,KAAKE,SAAWG,YAAYb,EAAKQ,KAAKG,UAAW,MAExD3B,YACE8B,cAAcd,EAAKQ,KAAKE,eAI7BK,cAAc,WC7BeC,QAAQf,SAASgB,cAAc,kCAE/CT,KAAKU"}