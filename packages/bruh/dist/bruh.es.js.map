{"version":3,"file":"bruh.es.js","sources":["../src/dom/live-fragment.mjs","../src/reactive/index.mjs","../src/util/index.mjs","../src/dom/index.browser.mjs"],"sourcesContent":["// Lightweight and performant DOM fragment that keeps its place,\n// useful for grouping siblings without making a parent element.\n// Not a true analog of the DocumentFragment, because the implementation\n// would be infeasible with that scope, adding a performance penalty as well.\n// Works as long as the start & end placeholders are siblings in that order\n// and they do not overlap other LiveFragment's:\n// Works: (start A)(start B)(end B)(end A)\n// Fails: (start A)(start B)(end A)(end B)\n// Also, make sure not to call .normalize() on the parent element,\n// because that would ruin the placeholders.\nexport class LiveFragment {\n  constructor() {\n    this.startMarker = document.createTextNode(\"\")\n    this.endMarker   = document.createTextNode(\"\")\n  }\n\n  static from(firstNode, lastNode) {\n    const liveFragment = new this()\n    firstNode.before(liveFragment.startMarker)\n    lastNode.after(liveFragment.endMarker)\n    return liveFragment\n  }\n\n  before(...xs) {\n    this.startMarker.before(...xs)\n  }\n\n  prepend(...xs) {\n    this.startMarker.after(...xs)\n  }\n\n  append(...xs) {\n    this.endMarker.before(...xs)\n  }\n\n  after(...xs) {\n    this.endMarker.after(...xs)\n  }\n\n  remove() {\n    const range = document.createRange()\n    range.setStartBefore(this.startMarker)\n    range.setEndAfter(this.endMarker)\n    range.deleteContents()\n  }\n\n  replaceChildren(...xs) {\n    const range = document.createRange()\n    range.setStartAfter(this.startMarker)\n    range.setEndBefore(this.endMarker)\n    range.deleteContents()\n    this.startMarker.after(...xs)\n  }\n\n  replaceWith(...xs) {\n    this.endMarker.after(...xs)\n    this.remove()\n  }\n\n  get childNodes() {\n    const childNodes = []\n\n    for (\n      let currentNode = this.startMarker.nextSibling;\n      currentNode != this.endMarker && currentNode;\n      currentNode = currentNode.nextSibling\n    )\n      childNodes.push(currentNode)\n\n    return childNodes\n  }\n\n  get children() {\n    return this.childNodes\n      .filter(node => node instanceof HTMLElement)\n  }\n}\n","const isReactive = Symbol.for(\"bruh reactive\")\n\n// A super simple and performant reactive value implementation\nexport class SimpleReactive {\n  [isReactive] = true\n\n  #value\n  #reactions = new Set()\n\n  constructor(value) {\n    this.#value = value\n  }\n\n  get value() {\n    return this.#value\n  }\n\n  set value(newValue) {\n    if (newValue === this.#value)\n      return\n\n    this.#value = newValue\n    for (const reaction of this.#reactions)\n      reaction()\n  }\n\n  addReaction(reaction) {\n    this.#reactions.add(reaction)\n\n    return () =>\n      this.#reactions.delete(reaction)\n  }\n}\n\n// A reactive implementation for building functional reactive graphs\n// Ensures state consistency, minimal node updates, and transparent update batching\nexport class FunctionalReactive {\n  [isReactive] = true\n\n  #value\n  #reactions = new Set()\n\n  // For derived nodes, f is the derivation function\n  #f\n  // Source nodes are 0 deep in the derivation graph\n  // This is for topological sort\n  #depth = 0\n  // All nodes have a set of derivatives that update when the node changes\n  #derivatives = new Set()\n\n  // Keep track of all the pending changes from the value setter\n  static #settersQueue = new Map()\n  // A queue of derivatives to potentially update, sorted into sets by depth\n  // This starts with depth 1 and can potentially have holes\n  static #derivativesQueue = []\n  // A queue of reactions to run after the graph is fully updated\n  static #reactionsQueue = []\n\n  constructor(x, f) {\n    if (!f) {\n      this.#value = x\n      return\n    }\n\n    this.#value = f()\n    this.#f = f\n    this.#depth = Math.max(...x.map(d => d.#depth)) + 1\n\n    x.forEach(d => d.#derivatives.add(this))\n  }\n\n  get value() {\n    // If there are any pending updates, go ahead and apply them first\n    // It's ok that there's already a microtask queued for this\n    if (FunctionalReactive.#settersQueue.size)\n      FunctionalReactive.applyUpdates()\n\n    return this.#value\n  }\n\n  set value(newValue) {\n    // Only allow souce nodes to be directly updated\n    if (this.#depth !== 0)\n      return\n\n    // Unless asked for earlier, these updates are just queued up until the microtasks run\n    if (!FunctionalReactive.#settersQueue.size)\n      queueMicrotask(FunctionalReactive.applyUpdates)\n\n    FunctionalReactive.#settersQueue.set(this, newValue)\n  }\n\n  addReaction(reaction) {\n    this.#reactions.add(reaction)\n\n    return () =>\n      this.#reactions.delete(reaction)\n  }\n\n  // Apply an update for a node and queue its derivatives if it actually changed\n  #applyUpdate(newValue) {\n    if (newValue === this.#value)\n      return\n\n    this.#value = newValue\n    FunctionalReactive.#reactionsQueue.push(...this.#reactions)\n\n    const queue = FunctionalReactive.#derivativesQueue\n    for (const derivative of this.#derivatives) {\n      const depth = derivative.#depth\n      if (!queue[depth])\n        queue[depth] = new Set()\n\n      queue[depth].add(derivative)\n    }\n  }\n\n  // Apply pending updates from actually changed source nodes\n  static applyUpdates() {\n    if (!FunctionalReactive.#settersQueue.size)\n      return\n\n    // Bootstrap by applying the updates from the pending setters\n    for (const [sourceNode, newValue] of FunctionalReactive.#settersQueue.entries())\n      sourceNode.#applyUpdate(newValue)\n    FunctionalReactive.#settersQueue.clear()\n\n    // Iterate down the depths, ignoring holes\n    // Note that both the queue (Array) and each depth Set iterators update as items are added\n    for (const depthSet of FunctionalReactive.#derivativesQueue) if (depthSet)\n      for (const derivative of depthSet)\n        derivative.#applyUpdate(derivative.#f())\n    FunctionalReactive.#derivativesQueue.length = 0\n\n    // Call all reactions now that the graph has a fully consistent state\n    for (const reaction of FunctionalReactive.#reactionsQueue)\n      reaction()\n    FunctionalReactive.#reactionsQueue.length = 0\n  }\n}\n\n// A little convenience function\nexport const r = (x, f) => new FunctionalReactive(x, f)\n\n// Do something with a value, updating if it is reactive\nexport const reactiveDo = (x, f) => {\n  if (x?.[isReactive]) {\n    f(x.value)\n    return x.addReaction(() => f(x.value))\n  }\n\n  f(x)\n}\n","// Create a pipeline with an initial value and a series of functions\nexport const pipe = (x, ...fs) =>\n  fs.reduce((y, f) => f(y), x)\n\n// Dispatch a custom event to (capturing) and from (bubbling) a target (usually a DOM node)\n// Returns false if the event was cancelled (preventDefault()) and true otherwise\nexport const dispatch = (target, type, options) =>\n  target.dispatchEvent(\n    // Default to behave like most DOM events\n    new CustomEvent(type, {\n      bubbles: true,\n      cancelable: true,\n      composed: true,\n      ...options\n    })\n  )\n\n// Inspired by https://antfu.me/posts/destructuring-with-object-or-array#take-away\n// Creates an object that is both destructable with {...} and [...]\n// Useful for writing library functions Ã  la react-use & vueuse\nexport const createDestructable = (object, iterable) => {\n  const destructable = {\n    ...object,\n    [Symbol.iterator]: () => iterable[Symbol.iterator]()\n  }\n\n  Object.defineProperty(destructable, Symbol.iterator, {\n    enumerable: false\n  })\n\n  return destructable\n}\n\n// A function that acts like Maybe.from(x).ifExists(existsThen).ifEmpty(emptyThen)\n// Except we just use an array in place of a true Maybe type\n// This is useful for setting and removing reactive attributes\nexport const maybeDo = (existsThen, emptyThen) => x => {\n  if (Array.isArray(x)) {\n    if (x.length)\n      existsThen(x[0])\n    else\n      emptyThen()\n  }\n  else\n    existsThen(x)\n}\n\n// Creates an object (as a Proxy) that acts as a function\n// So functionAsObject(f).property is equivalent to f(\"property\")\n// This is can be useful when combined with destructuring syntax, e.g.:\n// const { html, head, title, body, main, h1, p } = functionAsObject(e)\nexport const functionAsObject = f =>\n  new Proxy({}, {\n    get: (_, property) => f(property)\n  })\n","import { LiveFragment } from \"./live-fragment.mjs\"\nimport { reactiveDo } from \"../reactive/index.mjs\"\nimport { maybeDo } from \"../util/index.mjs\"\n\nconst isReactive     = Symbol.for(\"bruh reactive\")\nconst isMetaNode     = Symbol.for(\"bruh meta node\")\nconst isMetaTextNode = Symbol.for(\"bruh meta text node\")\nconst isMetaElement  = Symbol.for(\"bruh meta element\")\n\n// A basic check for if a value is allowed as a meta node's child\n// It's responsible for quickly checking the type, not deep validation\nconst isMetaNodeChild = x =>\n  // meta nodes, reactives, and DOM nodes\n  x?.[isMetaNode] ||\n  x?.[isReactive] ||\n  x instanceof Node ||\n  // Any array, just assume it contains valid children\n  Array.isArray(x) ||\n  // Everything else, as long as it isn't a function, can be a child when stringified\n  typeof x !== \"function\"\n\nconst toNode = x => {\n  if (x[isMetaNode])\n    return x.node\n\n  if (x instanceof Node)\n    return x\n\n  return document.createTextNode(x)\n}\n\nexport const childrenToNodes = children =>\n  children\n    .flat(Infinity)\n    .flatMap(child => {\n      if (!child[isReactive])\n        return [toNode(child)]\n\n      if (Array.isArray(child.value)) {\n        const liveFragment = new LiveFragment()\n        child.addReaction(() => {\n          liveFragment.replaceChildren(...childrenToNodes(child.value))\n        })\n        return [liveFragment.startMarker, ...childrenToNodes(child.value), liveFragment.endMarker]\n      }\n\n      let node = toNode(child.value)\n      child.addReaction(() => {\n        const oldNode = node\n        node = toNode(child.value)\n        oldNode.replaceWith(node)\n      })\n      return [node]\n    })\n\n\n\n// Meta Nodes\n\nexport class MetaTextNode {\n  constructor(textContent) {\n    this[isMetaNode] =\n    this[isMetaTextNode] = true\n\n    if (textContent[isReactive]) {\n      this.node = document.createTextNode(textContent.value)\n      textContent.addReaction(() => {\n        this.node.textContent = textContent.value\n      })\n    }\n    else {\n      this.node = document.createTextNode(textContent)\n    }\n  }\n\n  addProperties(properties = {}) {\n    Object.assign(this.node, properties)\n\n    return this\n  }\n}\n\nexport class MetaElement {\n  constructor(name, namespace) {\n    this[isMetaNode] =\n    this[isMetaElement] = true\n\n    this.node =\n      namespace\n        ? document.createElementNS(namespace, name)\n        : document.createElement  (           name)\n  }\n\n  static from(element) {\n    const result = new this(\"div\")\n    result.node = element\n    return result\n  }\n\n  addProperties(properties = {}) {\n    Object.assign(this.node, properties)\n\n    return this\n  }\n\n  addAttributes(attributes = {}) {\n    for (const name in attributes)\n      reactiveDo(attributes[name],\n        maybeDo(\n          value => this.node.setAttribute   (name, value),\n          ()    => this.node.removeAttribute(name)\n        )\n      )\n\n    return this\n  }\n\n  addDataAttributes(dataAttributes = {}) {\n    for (const name in dataAttributes)\n      reactiveDo(dataAttributes[name],\n        maybeDo(\n          value =>        this.node.dataset[name] = value,\n          ()    => delete this.node.dataset[name]\n        )\n      )\n\n    return this\n  }\n\n  before(...xs) {\n    this.node.before(...childrenToNodes(xs))\n  }\n\n  prepend(...xs) {\n    this.node.prepend(...childrenToNodes(xs))\n  }\n\n  append(...xs) {\n    this.node.append(...childrenToNodes(xs))\n  }\n\n  after(...xs) {\n    this.node.after(...childrenToNodes(xs))\n  }\n\n  replaceChildren(...xs) {\n    this.node.replaceChildren(...childrenToNodes(xs))\n  }\n\n  replaceWith(...xs) {\n    this.node.replaceWith(...childrenToNodes(xs))\n  }\n}\n\n\n\n// Convenience functions\n\nexport const hydrateTextNodes = () => {\n  const tagged = {}\n  const bruhTextNodes = document.getElementsByTagName(\"bruh-textnode\")\n\n  for (const bruhTextNode of bruhTextNodes) {\n    const textNode = document.createTextNode(bruhTextNode.textContent)\n\n    if (bruhTextNode.dataset.tag)\n      tagged[bruhTextNode.dataset.tag] = textNode\n\n    bruhTextNode.replaceWith(textNode)\n  }\n\n  return tagged\n}\n\nconst createMetaTextNode = textContent =>\n  new MetaTextNode(textContent)\n\nconst createMetaElement = (name, namespace) => (...variadic) => {\n  const meta = new MetaElement(name, namespace)\n\n  // Implement optional attributes as first argument\n  if (!isMetaNodeChild(variadic[0])) {\n    const [attributes, ...children] = variadic\n    meta.addAttributes(attributes)\n    meta.append(children)\n  }\n  else {\n    meta.append(variadic)\n  }\n\n  return meta\n}\n\n// JSX integration\nconst createMetaElementJSX = (nameOrComponent, attributesOrProps, ...children) => {\n  // If we are making a html element\n  // This is likely when the jsx tag name begins with a lowercase character\n  if (typeof nameOrComponent == \"string\") {\n    const meta = new MetaElement(nameOrComponent)\n\n    // These are attributes then, but they might be null/undefined\n    meta.addAttributes(attributesOrProps || {})\n    meta.append(children)\n\n    return meta\n  }\n\n  // It must be a component, then\n  // Bruh components are just functions that return meta elements\n  // Due to JSX, this would mean a function with only one parameter - a \"props\" object\n  // This object includes the all of the attributes and a \"children\" key\n  return nameOrComponent( Object.assign({}, attributesOrProps, { children }) )\n}\n\n// These will be called with short names\nexport {\n  createMetaTextNode   as t,\n  createMetaElement    as e,\n  createMetaElementJSX as h\n}\n\n// The JSX fragment is made into a bruh fragment (just an array)\nexport const JSXFragment = ({ children }) => children\n"],"names":["constructor","startMarker","document","createTextNode","endMarker","firstNode","lastNode","liveFragment2","this","before","after","xs","prepend","append","remove","range","createRange","setStartBefore","setEndAfter","deleteContents","replaceChildren","setStartAfter","setEndBefore","replaceWith","childNodes","currentNode","nextSibling","push","filter","node","HTMLElement","isReactive","Symbol","for","_a","_value","_reactions","x","f","Set","_value2","_f","_depth","Math","max","map","__privateGet","forEach","_derivatives","add","_settersQueue","size","applyUpdates","newValue","_FunctionalReactive","set","addReaction","reaction","_reactions2","delete","sourceNode","entries","_applyUpdate","call","clear","depthSet","_derivativesQueue","derivative","length","_reactionsQueue","_b","applyUpdate_fn","queue","depth","__privateAdd","FunctionalReactive","Map","reactiveDo","value","maybeDo","existsThen","emptyThen","Array","isArray","fs","reduce","y","target","type","options","dispatchEvent","CustomEvent","__spreadValues","bubbles","cancelable","composed","object","iterable","destructable","iterator","defineProperty","enumerable","Proxy","get","_","property","isMetaNode","isMetaTextNode","isMetaElement","toNode","Node","childrenToNodes","children","flat","Infinity","flatMap","child","LiveFragment","oldNode","textContent","addProperties","properties","assign","name","namespace","createElementNS","createElement","element","result","addAttributes","attributes","setAttribute","removeAttribute","addDataAttributes","dataAttributes","dataset","tagged","bruhTextNodes","getElementsByTagName","bruhTextNode","textNode","tag","MetaTextNode","variadic","meta","MetaElement","nameOrComponent","attributesOrProps","Object"],"mappings":"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"}